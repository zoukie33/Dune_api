#!/usr/bin/env node

/**
 * Module dependencies.
 */
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
var app = require('../app');
var debug = require('debug')('dune-api:server');
var fs = require('fs');

var http = require('http');
var https = require('https');


var credentials = {
    key: fs.readFileSync(__dirname + '/server.key'),
    cert: fs.readFileSync(__dirname + '/server.crt')
  };
/**
 * Get port from environment and store in Express.
 */

 //var port = normalizePort(process.env.PORT || '80');
 //app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
http.createServer(app).listen(80);
https.createServer(credentials, app).listen(443);
/**
 * Listen on provided port, on all network interfaces.
 */

//serverHttps.listen(port);
// serverHttps.listen(9002);
// server.on('error', onError);
// server.on('listening', onListening);
//serverHttps.on('error', onError);
//serverHttps.on('listening', onListening);

app.use(function(req, res, next) {
  if(!req.secure) {
    return res.redirect(['https://', req.get('Host'), req.url].join(''));
  }
  next();
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = serverHttps.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
